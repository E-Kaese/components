/*
 Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
 SPDX-License-Identifier: Apache-2.0
*/

@use 'sass:math';

@use '../internal/styles' as styles;
@use '../internal/styles/tokens' as awsui;

$grid-columns: 12;
$grid-gutter-width: awsui.$space-grid-gutter;

.grid {
  @include styles.styles-reset;
  display: flex;
  flex-wrap: wrap;
  margin-block: calc(#{$grid-gutter-width} / -2);
  margin-inline: calc(#{$grid-gutter-width} / -2);
  pointer-events: none;

  &.query-container {
    container: awsui-grid / inline-size;
  }

  &.no-gutters {
    margin-block: 0;
    margin-inline: 0;
  }
}

@mixin breakpoint-columns($breakpoint-name) {
  @for $i from 1 through $grid-columns {
    &.colspan-#{$breakpoint-name}-#{$i} {
      flex: 0 0 math.percentage(math.div($i, $grid-columns));
      // Add a `max-width` to ensure content within each column does not blow out
      // the width of the column. Applies to IE10+ and Firefox. Chrome and Safari
      // do not appear to require this.
      max-inline-size: math.percentage(math.div($i, $grid-columns));
    }

    &.push-#{$breakpoint-name}-#{$i} {
      inset-inline-start: math.percentage(math.div($i, $grid-columns));
    }

    &.pull-#{$breakpoint-name}-#{$i} {
      inset-inline-end: math.percentage(math.div($i, $grid-columns));
    }
  }

  &.push-#{$breakpoint-name}-0 {
    inset-inline-start: auto;
  }

  &.pull-#{$breakpoint-name}-0 {
    inset-inline-end: auto;
  }

  // `$grid-columns - 1` because offsetting by the width of an entire row isn't possible
  @for $i from 0 through ($grid-columns - 1) {
    // Avoid emitting useless .offset-0
    @if $i != 0 {
      &.offset-#{$breakpoint-name}-#{$i} {
        margin-inline-start: math.percentage(math.div($i, $grid-columns));
      }
    }
  }
}

.grid-column {
  box-sizing: border-box;
  position: relative;
  padding-block: calc(#{$grid-gutter-width} / 2);
  padding-inline: calc(#{$grid-gutter-width} / 2);
  display: flex;

  .grid.no-gutters > & {
    padding-block: 0;
    padding-inline: 0;
  }

  @each $breakpoint-name, $size in styles.$container-breakpoints {
    @if ($size == 0px) {
      @include breakpoint-columns($breakpoint-name);
    } @else {
      @container awsui-grid (inline-size > #{$size}) {
        @include breakpoint-columns($breakpoint-name);
      }
    }
  }
}

.restore-pointer-events {
  pointer-events: auto;
  inline-size: 100%;
}
